from aiogram.types import Message, BotCommand
from aiogram import types
from aiogram.dispatcher import FSMContext

from src.bot import bot, dp
from src.keyboards import inline_customer_keyboard
from src.states import *



@dp.message_handler(commands=['start'])
async def customer_start(message: types.Message):
    try:
            await message.answer("–î–æ–±—Ä–æ –ü–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –≥—Ä—É–ø–ø—ã Poizon Order", reply_markup=inline_customer_keyboard)
            bot_commands = [
                BotCommand(command="/start", description="–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞")
            ]
            await bot.set_my_commands(bot_commands)
    except Exception as Eror:
        await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ ‚ö†Ô∏è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑', reply_markup=inline_customer_keyboard)


@dp.callback_query_handler(lambda cb: cb.data == 'calc', state='*')
async def calc(callback_query: types.CallbackQuery, state: FSMContext, object = None):
    try:
        await callback_query.message.edit_text('üìä –û—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É —Å—É–º–º—É –≤ —é–∞–Ω—è—Ö¬•, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑')
        await GetPrice.step_1.set()
    except Exception as Eror:
        await state.finish()
        await callback_query.message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ ‚ö†Ô∏è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑', reply_markup=inline_customer_keyboard)


@dp.message_handler(state= GetPrice.step_1)
async def calc_get_price(message: types.Message, state: FSMContext):
    try:

        with open('A:\—à–µ—Ä–ª–æ–∫\–Ø–Ω_–ï–ª–µ–Ω—Å–∫–∏–π\src\data\cost.txt', "r", encoding='utf-8') as f:
            cost = f.read()
        summ = float(message.text)/float(cost)
        commision = 450
        if summ >= 10001  and summ <= 19000:
            commision = 900
        elif summ >= 19001  and summ <= 27000:
            commision = 1500
        elif summ >= 27001  and summ <= 40000:
            commision = 2300
        elif summ >= 40001  and summ <= 100000:
            commision = 3500
        elif summ > 100000:
            commision = 5500

        await message.answer(f"–¶–µ–Ω–∞: {round(summ + commision)}‚ÇΩ\n–ë–µ–∑ —É—á—ë—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏", reply_markup=inline_customer_keyboard)
        await state.finish()
    except ValueError as Eror:
        await state.finish()
        await message.answer("–≠—Ç–æ –Ω–µ —á–∏—Å–ª–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≥–æ", reply_markup=inline_customer_keyboard)


@dp.callback_query_handler(lambda cb: cb.data == 'get_link', state='*')
async def link(callback_query: types.CallbackQuery, state: FSMContext):
    try:

        photo1 = open('A:\—à–µ—Ä–ª–æ–∫\–Ø–Ω_–ï–ª–µ–Ω—Å–∫–∏–π\src\data\photo_2024-03-11_23-33-02.jpg', 'rb')
        photo2 = open('A:\—à–µ—Ä–ª–æ–∫\–Ø–Ω_–ï–ª–µ–Ω—Å–∫–∏–π\src\data\photo_2024-03-14_15-02-03.jpg', 'rb')

        await callback_query.message.answer_photo(photo2)
        await callback_query.message.answer_photo(photo1)

        await bot.send_message(callback_query.message.chat.id, '1. –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Poizon (dewu) –Ω–∞ —Å–≤–æ–µ–º —Å–º–∞—Ä—Ç—Ñ–æ–Ω–µ –∏ –Ω–∞–∂–∏–º–∞–µ–º –Ω–∞ –∏–∫–æ–Ω–∫—É "–ø–∞–∫–µ—Ç–∏–∫–∞" –≤ –Ω–∏–∂–Ω–µ–π —Å—Ç—Ä–æ–∫–µ\n'
                                                '2. –í –ø–æ–∏—Å–∫–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ –≤–≤–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω—É–∂–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ\n'
                                                '3. –ö–ª–∏–∫–∞–µ–º –Ω–∞ –∂–µ–ª–∞–µ–º—ã–π —Ç–æ–≤–∞—Ä –∏ –ø–æ–ø–∞–¥–∞–µ–º –≤ –∫–∞—Ä—Ç–æ—á–∫—É —Ç–æ–≤–∞—Äa\n'
                                                '4. –ù–∞—Ö–æ–¥—è—Å—å –≤ –∫–∞—Ä—Ç–æ—á–∫–µ —Ç–æ–≤–∞—Ä–∞ –∫–ª–∏–∫–∞–µ–º –Ω–∞ –∑–µ–ª–µ–Ω—É—é –∏–∫–æ–Ω–∫—É –æ—Ç–º–µ—á–µ–Ω–Ω—É—é –Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–µ\n'
                                                '5. –î–∞–ª–µ–µ, –∫–ª–∏–∫–∞–µ–º –Ω–∞ –∏–∫–æ–Ω–∫—É –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è\n'
                                                '–ì–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π –∏ –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å—á–µ—Ç –ø–æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏.', reply_markup=inline_customer_keyboard)

    except Exception as Eror:
        await state.finish()
        await callback_query.message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ ‚ö†Ô∏è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑', reply_markup=inline_customer_keyboard)


@dp.callback_query_handler(lambda cb: cb.data == 'get_free', state='*')
async def link(callback_query: types.CallbackQuery, state: FSMContext):
    try:
        await callback_query.message.edit_text('- –ü—Ä–∏ 3-—Ç—Ä–µ—Ç—å–µ–º –∏ –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –∑–∞–∫–∞–∑–∞—Ö –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è —Å–∫–∏–¥–∫–∞ 10% –Ω–∞ –∫–æ–º–∏—Å—Å–∏—é.\n'
                                                '-–ó–∞ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞ —Å–∫–∏–¥–∫–∞ 300 —Ä—É–±–ª–µ–π', reply_markup=inline_customer_keyboard)

    except Exception as Eror:
        await state.finish()
        await callback_query.message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ ‚ö†Ô∏è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑', reply_markup=inline_customer_keyboard)


@dp.callback_query_handler(lambda cb: cb.data == 'deliver', state='*')
async def link(callback_query: types.CallbackQuery, state: FSMContext):
    try:
        await callback_query.message.edit_text("""
‚Ä¢ –î–æ—Å—Ç–∞–≤–∫–∞ —Ç–æ–≤–∞—Ä–∞ –¥–æ –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 9 –¥–Ω–µ–π —Å –º–æ–º–µ–Ω—Ç–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞.\n 
‚Ä¢ –°—Ç–æ–∏–º–æ—Å—Ç—å 370–∫–≥. üöõ \n
‚Ä¢ –ï—Å–ª–∏ –≤–µ—Å –∑–∞–∫–∞–∑–∞ –º–µ–Ω—å—à–µ 1 –∫–≥, —Ç–æ —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞ –±—É–¥–µ—Ç —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—Ç—å—Å—è –ø–æ —Ü–µ–Ω–µ –∑–∞ –≥—Ä–∞–º–º. \n
‚Ä¢ –î–æ—Å—Ç–∞–≤–∫–∞ —Å –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫–∞ –ø–æ –†–æ—Å—Å–∏–∏ –¥–æ –≤–∞—à–µ–≥–æ –∞–¥—Ä–µ—Å–∞ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –ª—é–±—ã–º —É–¥–æ–±–Ω—ã–º –¥–ª—è –≤–∞—Å —Å–ø–æ—Å–æ–±–æ–º""", reply_markup=inline_customer_keyboard)

    except Exception as Eror:
        await state.finish()
        await callback_query.message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ ‚ö†Ô∏è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑', reply_markup=inline_customer_keyboard)

